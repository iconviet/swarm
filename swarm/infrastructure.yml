version: "3.4"

networks:
  testing:
    external: true
  staging:
    external: true
  production:
    external: true
  development:
    external: true
  infrastructure:
    external: true

services:
  # NGINX
  nginx:
    image: iconviet/nginx:latest
    networks:
      - testing
      - staging
      - production
      - development
      - infrastructure
    ports:
      - "80:80"
      - "81:81"
      - "82:82"
    volumes:
      - ~/volume/nginx:/etc/nginx
      - ~/volume/nginx/www:/etc/nginx/www
    deploy:
      resources:
        reservations:
          memory: 256M
        limits:
          memory: 512M
      restart_policy:
        delay: 1m
        window: 1m
        condition: any
      placement:
        constraints:
          - node.role == manager

# MSSQL
  mssql:
    image: iconviet/mssql:latest
    networks:
      - infrastructure
    ports:
      - "1433"
    volumes:
      - ~/volume/mssql/data/infrastructure:/var/opt/mssql/data
    deploy:
      resources:
        reservations:
          memory: 1024M
        limits:
          memory: 4096M
      restart_policy:
        delay: 1m
        window: 1m
        condition: any
      placement:
        constraints:
          - node.role == manager

  # DOCKER
  docker:
    image: iconviet/docker:latest
    networks:
      - infrastructure
    ports:
      - "5000:5000"
    volumes:
      - ~/volume/docker:/var/lib/registry
    deploy:
      resources:
        reservations:
          memory: 128M
      restart_policy:
        delay: 1m
        window: 1m
        condition: any
      placement:
        constraints:
          - node.role == manager

  # TEAMCITY
  teamcity:
    depends_on:
      - mssql
    image: iconviet/teamcity:latest
    networks:
      - infrastructure
    ports:
      - "8111"
    volumes:
      - ~/volume/teamcity:/var/lib/teamcity
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      resources:
        reservations:
          memory: 1024M
        limits:
          memory: 4096M
      restart_policy:
        delay: 1m
        window: 1m
        condition: any
      placement:
        constraints:
          - node.role == manager

# PORTAINER
  portainer:
    image: iconviet/portainer:latest
    networks:
      - infrastructure
    ports:
      - "9000"
    volumes:
      - ~/volume/portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      resources:
        reservations:
          memory: 128M
      restart_policy:
        delay: 1m
        window: 1m
        condition: any
      placement:
        constraints:
          - node.role == manager

# VISUALIZER
  visualizer:
    image: iconviet/visualizer:latest
    networks:
      - infrastructure
    ports:
      - "8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      resources:
        reservations:
          memory: 128M
      restart_policy:
        delay: 1m
        window: 1m
        condition: any
      placement:
        constraints:
          - node.role == manager