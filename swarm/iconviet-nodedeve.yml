version: "3.7"

networks:
  iconviet-nodedeve:
    external: true

services:
  # NGINX
  nginx:
    depends_on:
      - portainer
      - service_api
      - service_web
    image: iconviet/nginx:latest
    networks:
      - iconviet-nodedeve
    ports:
      - "80:80"
      - "81:81"
    environment:
      - ENVIRONMENT=development
    volumes:
      - ~/volume/nginx:/etc/nginx
    deploy:
      resources:
        reservations:
          memory: 128M
        limits:
          memory: 256M
      restart_policy:
        delay: 1m
        window: 1m
        condition: any
      placement:
        constraints:
          - node.role == manager

  # RAVENDB
  ravendb:
    image: iconviet/ravendb:latest
    networks:
      - iconviet-nodedeve
    ports:
      - "8080"
      - "38888"
    environment:
      - ENVIRONMENT=development
    deploy:
      resources:
        reservations:
          memory: 128M
        limits:
          memory: 256M
      restart_policy:
        delay: 1m
        window: 1m
        condition: any
      placement:
        constraints:
          - node.role == manager

  # RABBITMQ
  rabbitmq:
    image: iconviet/rabbitmq:latest
    networks:
      - iconviet-nodedeve
    ports:
      - "5672"
      - "15672"
    environment:
      - ENVIRONMENT=development
    deploy:
      resources:
        reservations:
          memory: 128M
        limits:
          memory: 256M
      restart_policy:
        delay: 1m
        window: 1m
        condition: any
      placement:
        constraints:
          - node.role == manager

  # REDIS
  redis:
    image: iconviet/redis:latest
    networks:
      - iconviet-nodedeve
    ports:
      - "6379"
    environment:
      - ENVIRONMENT=development
    volumes:
      - ~/volume/redis:/var/lib/redis
    deploy:
      resources:
        reservations:
          memory: 128M
        limits:
          memory: 256M
      restart_policy:
        delay: 1m
        window: 1m
        condition: any
      placement:
        constraints:
          - node.role == manager

  # ELASTIC
  elastic:
    image: iconviet/elastic:latest
    networks:
      - iconviet-nodedeve
    ports:
      - "5601"
      - "9200"
      - "9300"
    environment:
      - ENVIRONMENT=development
      - "cluster.name=development"
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - "bootstrap.memory_lock=true"
      - "enforce.bootstrap.checks=false"
    deploy:
      resources:
        reservations:
          memory: 512M
        limits:
          memory: 1024M
      restart_policy:
        delay: 1m
        window: 1m
        condition: any
      placement:
        constraints:
          - node.role == manager

  # MSSQL
  mssql:
    image: iconviet/mssql
    networks:
      - iconviet-nodedeve
    ports:
      - "1433"
    environment:
      - ENVIRONMENT=development
    volumes:
      - ~/volume/mssql:/var/opt/mssql/data
    deploy:
      resources:
        reservations:
          memory: 512M
        limits:
          memory: 1024M
      restart_policy:
        delay: 1m
        window: 1m
        condition: any
      placement:
        constraints:
          - node.role == manager

  # PORTAINER
  portainer:
    image: iconviet/portainer
    networks:
      - iconviet-nodedeve
    ports:
      - "9000"
    environment:
      - ENVIRONMENT=development
    volumes:
      - ~/volume/portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      resources:
        reservations:
          memory: 32M
        limits:
          memory: 64M
      restart_policy:
        delay: 1m
        window: 1m
        condition: any
      placement:
        constraints:
          - node.role == manager

  # WATCHTOWER
  watchtower:
    depends_on:
      - service_api
      - service_web
    image: containrrr/watchtower
    networks:
      - iconviet-nodedeve
    environment:
      - ENVIRONMENT=development
    command: --debug --cleanup --label-enable --interval 30
    volumes:
      - ~/.docker/config.json:/config.json
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      resources:
        reservations:
          memory: 16M
        limits:
          memory: 32M
      restart_policy:
        delay: 1m
        window: 1m
        condition: any
      placement:
        constraints:
          - node.role == manager

  #SERVICE_API
  service_api:
    depends_on:
      - mssql
      - redis
      - elastic
      - ravendb
      - rabbitmq
    image: iconviet.azurecr.io/nodedeve_iconlook_service_api
    networks:
      iconviet-nodedeve:
        aliases:
          - nodedeve_iconlook_service_api
    ports:
      - "80"
    environment:
      - ENVIRONMENT=development
    deploy:
      replicas: 1
      mode: replicated
      resources:
        reservations:
          memory: 128M
        limits:
          memory: 256M
      restart_policy:
        delay: 1m
        window: 1m
        condition: any
      update_config:
        delay: 10s
        monitor: 60s
        parallelism: 1
        max_failure_ratio: 0.3
        failure_action: continue
      placement:
        constraints:
          - node.role == manager
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  #SERVICE_WEB
  service_web:
    depends_on:
      - mssql
      - redis
      - elastic
      - ravendb
      - rabbitmq
    image: iconviet.azurecr.io/nodedeve_iconlook_service_web
    networks:
      iconviet-nodedeve:
        aliases:
          - nodedeve_iconlook_service_web
    ports:
      - "80"
    environment:
      - ENVIRONMENT=development
    deploy:
      replicas: 1
      mode: replicated
      resources:
        reservations:
          memory: 128M
        limits:
          memory: 256M
      restart_policy:
        delay: 1m
        window: 1m
        condition: any
      update_config:
        delay: 10s
        monitor: 60s
        parallelism: 1
        max_failure_ratio: 0.3
        failure_action: continue
      placement:
        constraints:
          - node.role == manager
    labels:
      - "com.centurylinklabs.watchtower.enable=true"